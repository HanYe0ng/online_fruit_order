-- 이 SQL 파일을 Supabase 콘솔의 SQL Editor에서 실행하세요
-- 또는 supabase cli가 있다면: supabase db push

-- 0. 필수 테이블들이 없다면 생성
CREATE TABLE IF NOT EXISTS public.stores (
    id bigint generated by default as identity primary key,
    name text not null,
    location text,
    created_at timestamp default now()
);

-- 기본 점포 데이터 삽입 (없다면)
INSERT INTO public.stores (name, location)
SELECT '달콤네 본점', '서울시 강남구 테헤란로'
WHERE NOT EXISTS (SELECT 1 FROM public.stores WHERE name = '달콤네 본점');

INSERT INTO public.stores (name, location)
SELECT '달콤네 2호점', '서울시 서초구 서초대로'
WHERE NOT EXISTS (SELECT 1 FROM public.stores WHERE name = '달콤네 2호점');

INSERT INTO public.stores (name, location)
SELECT '달콤네 3호점', '서울시 송파구 잠실로'
WHERE NOT EXISTS (SELECT 1 FROM public.stores WHERE name = '달콤네 3호점');

-- 아파트 테이블도 없다면 생성
CREATE TABLE IF NOT EXISTS public.apartments (
    id bigint generated by default as identity primary key,
    name text not null,
    address text,
    created_at timestamp default now()
);

-- 기본 아파트 데이터 삽입
INSERT INTO public.apartments (name, address)
SELECT '래미안 블루밍', '서울시 강남구'
WHERE NOT EXISTS (SELECT 1 FROM public.apartments WHERE name = '래미안 블루밍');

CREATE TABLE IF NOT EXISTS public.apartment_units (
    id bigint generated by default as identity primary key,
    apartment_id bigint references public.apartments(id) on delete cascade,
    dong text not null,
    ho text not null,
    created_at timestamp default now(),
    unique(apartment_id, dong, ho)
);

-- 기본 아파트 동호수 삽입
INSERT INTO public.apartment_units (apartment_id, dong, ho)
SELECT 1, '101', '1001'
WHERE EXISTS (SELECT 1 FROM public.apartments WHERE id = 1)
AND NOT EXISTS (SELECT 1 FROM public.apartment_units WHERE apartment_id = 1 AND dong = '101' AND ho = '1001');

-- products 테이블이 없다면 생성
CREATE TABLE IF NOT EXISTS public.products (
    id bigint generated by default as identity primary key,
    store_id bigint references public.stores(id) on delete cascade,
    name text not null,
    price integer not null,
    quantity integer not null,
    image_url text,
    is_soldout boolean default false,
    category text default 'today' check (category in ('today', 'gift')),
    created_at timestamp default now()
);

-- 1. products 테이블에 category 컬럼이 없다면 추가
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'products' AND column_name = 'category') THEN
        ALTER TABLE public.products 
        ADD COLUMN category text DEFAULT 'today' CHECK (category IN ('today', 'gift'));
    END IF;
END $$;

-- 2. NULL 값들을 'today'로 업데이트
UPDATE public.products 
SET category = 'today' 
WHERE category IS NULL;

-- 3. 선물 관련 상품들을 'gift'로 분류
UPDATE public.products 
SET category = 'gift' 
WHERE lower(name) LIKE '%선물%' 
   OR lower(name) LIKE '%기프트%' 
   OR lower(name) LIKE '%gift%'
   OR lower(name) LIKE '%box%'
   OR lower(name) LIKE '%세트%';

-- 4. NOT NULL 제약조건 추가
ALTER TABLE public.products 
ALTER COLUMN category SET NOT NULL;

-- 5. gift_product_details 테이블 생성 (없다면)
CREATE TABLE IF NOT EXISTS public.gift_product_details (
    id bigint generated by default as identity primary key,
    product_id bigint references public.products(id) on delete cascade,
    original_price integer,
    discount_rate integer,
    tags text[],
    rating numeric(2,1) DEFAULT 0,
    review_count integer DEFAULT 0,
    nutrition_info text,
    storage_info text,
    origin text,
    description_detail text,
    created_at timestamp default now()
);

-- 6. gift_products_view 뷰 생성 (또는 업데이트)
CREATE OR REPLACE VIEW public.gift_products_view AS
SELECT 
    p.id,
    p.store_id,
    s.name as store_name,
    p.name,
    p.price,
    gpd.original_price,
    gpd.discount_rate,
    p.quantity,
    p.image_url,
    p.is_soldout,
    gpd.tags,
    gpd.rating,
    gpd.review_count,
    gpd.nutrition_info,
    gpd.storage_info,
    gpd.origin,
    gpd.description_detail,
    p.created_at
FROM public.products p
JOIN public.stores s ON p.store_id = s.id
LEFT JOIN public.gift_product_details gpd ON p.id = gpd.product_id
WHERE p.category = 'gift'
ORDER BY p.created_at DESC;

-- 7. 인덱스 생성
CREATE INDEX IF NOT EXISTS products_category_idx ON public.products(category);
CREATE INDEX IF NOT EXISTS products_store_category_idx ON public.products(store_id, category);
CREATE INDEX IF NOT EXISTS gift_product_details_product_id_idx ON public.gift_product_details(product_id);

-- 8. display_order 컬럼 추가 (순서 관리용)
DO $
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'products' AND column_name = 'display_order') THEN
        ALTER TABLE public.products 
        ADD COLUMN display_order integer DEFAULT 0;
        
        -- 컬럼에 주석 추가
        COMMENT ON COLUMN public.products.display_order IS '상품 표시 순서 (낮은 숫자가 우선)';
        
        -- 인덱스 추가 (성능 최적화)
        CREATE INDEX idx_products_display_order ON public.products(store_id, display_order);
        
        -- 기존 상품들에 기본 순서 설정 (생성일 기준)
        UPDATE public.products 
        SET display_order = (
          SELECT ROW_NUMBER() OVER (PARTITION BY store_id ORDER BY created_at DESC)
          FROM (SELECT id, store_id, created_at FROM public.products) AS p
          WHERE p.id = products.id
        );
    END IF;
END $;

-- 9. 확인
SELECT 
    'stores' as table_name,
    name as category,
    id as count
FROM public.stores 

UNION ALL

SELECT 
    'products' as table_name,
    category,
    COUNT(*)::bigint as count
FROM public.products 
GROUP BY category

UNION ALL

SELECT 
    'gift_product_details' as table_name,
    'total' as category,
    COUNT(*)::bigint as count
FROM public.gift_product_details;