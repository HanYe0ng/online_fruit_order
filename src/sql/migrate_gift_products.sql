-- =====================================
-- 과일선물 기능을 위한 데이터베이스 마이그레이션
-- 기존 데이터를 유지하면서 새로운 기능 추가
-- =====================================

-- 단계 1: products 테이블에 category 컬럼 추가
-- =====================================
DO $$
BEGIN
    -- category 컬럼이 존재하지 않는 경우에만 추가
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'products' 
        AND column_name = 'category'
        AND table_schema = 'public'
    ) THEN
        -- 1. category 컬럼 추가 (기본값: 'today')
        ALTER TABLE public.products 
        ADD COLUMN category text DEFAULT 'today' CHECK (category IN ('today', 'gift'));
        
        -- 2. 기존 데이터 업데이트 (선물 관련 키워드가 있는 상품은 'gift'로 설정)
        UPDATE public.products 
        SET category = 'gift' 
        WHERE lower(name) LIKE '%선물%' 
           OR lower(name) LIKE '%기프트%' 
           OR lower(name) LIKE '%gift%';
        
        -- 3. NOT NULL 제약 조건 추가
        ALTER TABLE public.products 
        ALTER COLUMN category SET NOT NULL;
        
        RAISE NOTICE 'products 테이블에 category 컬럼이 추가되었습니다.';
    ELSE
        RAISE NOTICE 'products 테이블에 category 컬럼이 이미 존재합니다.';
    END IF;
END
$$;

-- 단계 2: gift_product_details 테이블 생성
-- =====================================
CREATE TABLE IF NOT EXISTS public.gift_product_details (
    id bigint generated by default as identity primary key,
    product_id bigint references public.products(id) on delete cascade,
    original_price integer, -- 정가
    discount_rate integer, -- 할인율 (%)
    tags text[], -- 태그 배열
    rating numeric(2,1) DEFAULT 0, -- 평점 (0.0 ~ 5.0)
    review_count integer DEFAULT 0, -- 리뷰 수
    nutrition_info text, -- 영양 정보
    storage_info text, -- 보관 방법
    origin text, -- 원산지
    description_detail text, -- 상세 설명
    created_at timestamp default now()
);

-- 단계 3: 인덱스 생성 (성능 최적화)
-- =====================================
CREATE INDEX IF NOT EXISTS products_category_idx ON public.products(category);
CREATE INDEX IF NOT EXISTS products_store_category_idx ON public.products(store_id, category);
CREATE INDEX IF NOT EXISTS gift_details_product_idx ON public.gift_product_details(product_id);

-- 단계 4: '달콤네 추천 실속세트 9과' 상품 추가
-- =====================================
DO $$
DECLARE
    new_product_id bigint;
BEGIN
    -- 이미 존재하는지 확인
    IF NOT EXISTS (
        SELECT 1 FROM public.products 
        WHERE name = '달콤네 추천 실속세트 9과' AND category = 'gift'
    ) THEN
        -- 상품 추가
        INSERT INTO public.products (
            store_id,
            name,
            price,
            quantity,
            image_url,
            is_soldout,
            category
        ) VALUES (
            1, -- 첫 번째 점포 (달콤네 강남점)
            '달콤네 추천 실속세트 9과',
            53000,
            15,
            'https://images.unsplash.com/photo-1571771894821-ce9b6c11b08e?w=400',
            false,
            'gift'
        ) RETURNING id INTO new_product_id;
        
        -- 상세 정보 추가
        INSERT INTO public.gift_product_details (
            product_id,
            original_price,
            discount_rate,
            tags,
            rating,
            review_count,
            nutrition_info,
            storage_info,
            origin,
            description_detail
        ) VALUES (
            new_product_id,
            59000, -- 정가
            10, -- 10% 할인
            ARRAY['추석특가', '혼합세트', '실속형'],
            4.8,
            34,
            '사과 5개, 배 4개 구성 - 비타민C, 식이섬유 풍부',
            '서늘하고 통풍이 잘 되는 곳에 보관, 냉장보관 권장',
            '국내산',
            '사과, 배 혼합세트로 당도가 높아서 맛있는 과일들로만 구성된 9과 상품입니다. 심혈을 기울여 준비한 추석 과일 세트입니다.'
        );
        
        RAISE NOTICE '달콤네 추천 실속세트 9과 상품이 추가되었습니다. (ID: %)', new_product_id;
    ELSE
        RAISE NOTICE '달콤네 추천 실속세트 9과 상품이 이미 존재합니다.';
    END IF;
END
$$;

-- 단계 5: 과일선물 상품 조회용 뷰 생성
-- =====================================
CREATE OR REPLACE VIEW public.gift_products_view AS
SELECT 
    p.id,
    p.store_id,
    s.name as store_name,
    p.name,
    p.price,
    gpd.original_price,
    gpd.discount_rate,
    p.quantity,
    p.image_url,
    p.is_soldout,
    gpd.tags,
    gpd.rating,
    gpd.review_count,
    gpd.nutrition_info,
    gpd.storage_info,
    gpd.origin,
    gpd.description_detail,
    p.created_at
FROM public.products p
JOIN public.stores s ON p.store_id = s.id
LEFT JOIN public.gift_product_details gpd ON p.id = gpd.product_id
WHERE p.category = 'gift'
ORDER BY p.created_at DESC;

-- 단계 6: 확인 쿼리 실행
-- =====================================
SELECT 
    'Migration completed successfully!' as status,
    (SELECT COUNT(*) FROM public.products WHERE category = 'gift') as gift_products_count,
    (SELECT COUNT(*) FROM public.gift_product_details) as gift_details_count;

-- 과일선물 상품 확인
SELECT * FROM public.gift_products_view;

-- 전체 상품 카테고리별 통계
SELECT 
    category,
    COUNT(*) as count,
    array_agg(name ORDER BY name) as product_names
FROM public.products 
GROUP BY category;
