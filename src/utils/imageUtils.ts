import imageCompression from 'browser-image-compression'
import { detectInAppBrowser, isWebWorkerSupported } from './browserDetection'

interface ImageCompressionOptions {
  maxSizeMB?: number
  maxWidthOrHeight?: number
  useWebWorker?: boolean
  initialQuality?: number
  onProgress?: (progress: number) => void
}

export interface CompressionResult {
  file: File
  originalSize: number
  compressedSize: number
  compressionRatio: number
}

// Ïù∏Ïï±Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨Î•º Ïö∞ÌöåÌï†ÏßÄ Í≤∞Ï†ï
const shouldSkipImageProcessing = (file: File, browserInfo: any): boolean => {
  // Ïπ¥Ïπ¥Ïò§ÌÜ° Ïù∏Ïï±Î∏åÎùºÏö∞Ï†ÄÏóêÏÑúÎäî Ìï≠ÏÉÅ Ïö∞Ìöå
  if (browserInfo.browser === 'kakao') {
    console.log('üü° Ïπ¥Ïπ¥Ïò§ÌÜ° Ïù∏Ïï±Î∏åÎùºÏö∞Ï†Ä: Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Ïö∞Ìöå')
    return true
  }
  
  // Îã§Î•∏ Ïù∏Ïï±Î∏åÎùºÏö∞Ï†ÄÏóêÏÑúÎäî ÌååÏùº ÌÅ¨Í∏∞Ïóê Îî∞Îùº Í≤∞Ï†ï
  if (browserInfo.isInApp) {
    const fileSizeMB = file.size / (1024 * 1024)
    
    // 5MB Ïù¥ÏÉÅÏùò ÌååÏùºÏùÄ Ïö∞Ìöå
    if (fileSizeMB > 5) {
      console.log(`üü° Ïù∏Ïï±Î∏åÎùºÏö∞Ï†Ä: ÌååÏùº ÌÅ¨Í∏∞ ${fileSizeMB.toFixed(2)}MB > 5MB, Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Ïö∞Ìöå`)
      return true
    }
  }
  
  return false
}

// Îã®Í≥ÑÎ≥Ñ ÏïïÏ∂ï Ï†ÑÎûµ
const getCompressionStrategy = (fileSize: number, browserInfo: any) => {
  const sizeMB = fileSize / (1024 * 1024);
  
  if (browserInfo.needsSpecialHandling) {
    // Ïπ¥Ïπ¥Ïò§ÌÜ° Îì± ÌäπÎ≥Ñ Ï≤òÎ¶¨Í∞Ä ÌïÑÏöîÌïú Î∏åÎùºÏö∞Ï†Ä
    return {
      maxSizeMB: sizeMB > 6 ? 1.6 : 1.1,
      maxWidthOrHeight: sizeMB > 6 ? 1500 : 1200,
      useWebWorker: false,
      initialQuality: 0.9
    };
  } else if (browserInfo.isInApp) {
    // ÏùºÎ∞ò Ïù∏Ïï±Î∏åÎùºÏö∞Ï†Ä
    return {
      maxSizeMB: sizeMB > 8 ? 1.6 : 1.2,
      maxWidthOrHeight: sizeMB > 8 ? 1500 : 1300,
      useWebWorker: false, // ÏïàÏ†ÑÏùÑ ÏúÑÌï¥ ÎπÑÌôúÏÑ±Ìôî
      initialQuality: 0.9
    };
  } else {
    // ÏùºÎ∞ò Î∏åÎùºÏö∞Ï†Ä
    return {
      maxSizeMB: sizeMB > 5 ? 1.4 : 1,
      maxWidthOrHeight: sizeMB > 5 ? 1600 : 1400,
      useWebWorker: isWebWorkerSupported(),
      initialQuality: 0.88
    };
  }
};

export const compressImage = async (
  file: File,
  options: ImageCompressionOptions = {},
  onProgress?: (progress: number) => void
): Promise<CompressionResult> => {
  const browserInfo = detectInAppBrowser();
  
  // üö® Ïù∏Ïï±Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ ÏôÑÏ†Ñ Ïö∞Ìöå ÏòµÏÖò
  if (browserInfo.isInApp && shouldSkipImageProcessing(file, browserInfo)) {
    console.log('üö® Ïù∏Ïï±Î∏åÎùºÏö∞Ï†Ä Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Ïö∞Ìöå Î™®Îìú ÌôúÏÑ±Ìôî');
    onProgress?.(100);
    
    return {
      file,
      originalSize: file.size,
      compressedSize: file.size,
      compressionRatio: 0
    };
  }
  
  const strategy = getCompressionStrategy(file.size, browserInfo);
  
  console.log('Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï ÏãúÏûë:', {
    browser: browserInfo.browser,
    isInApp: browserInfo.isInApp,
    needsSpecialHandling: browserInfo.needsSpecialHandling,
    originalSize: (file.size / 1024 / 1024).toFixed(2) + 'MB',
    strategy
  });

  // ÏòµÏÖò Î≥ëÌï© (ÏÇ¨Ïö©Ïûê ÏòµÏÖòÏù¥ Ïö∞ÏÑ†)
  const finalOptions = {
    maxSizeMB: options.maxSizeMB ?? strategy.maxSizeMB,
    maxWidthOrHeight: options.maxWidthOrHeight ?? strategy.maxWidthOrHeight,
    useWebWorker: options.useWebWorker ?? strategy.useWebWorker,
    initialQuality: options.initialQuality ?? strategy.initialQuality
  };

  try {
    onProgress?.(10);
    
    // Ï≤´ Î≤àÏß∏ ÏïïÏ∂ï ÏãúÎèÑ
    let compressedFile = await imageCompression(file, {
      ...finalOptions,
      onProgress: (progress: number) => {
        onProgress?.(10 + (progress * 60));
      }
    });
    
    onProgress?.(70);
    
    // Í≤∞Í≥º ÌôïÏù∏ Î∞è ÌïÑÏöîÏãú Ï∂îÍ∞Ä ÏïïÏ∂ï
    const targetSize = finalOptions.maxSizeMB * 1024 * 1024;
    
    if (compressedFile.size > targetSize * 1.2) { // 20% Ïó¨Ïú†
      console.log('Ï∂îÍ∞Ä ÏïïÏ∂ï ÌïÑÏöî, Îëê Î≤àÏß∏ ÏãúÎèÑ...');
      
      // Îçî Í∞ïÌïú ÏïïÏ∂ï ÏÑ§Ï†ï
      const secondAttempt = await imageCompression(file, {
        maxSizeMB: finalOptions.maxSizeMB * 0.8,
        maxWidthOrHeight: finalOptions.maxWidthOrHeight * 0.9,
        useWebWorker: false, // Îëê Î≤àÏß∏ ÏãúÎèÑÏóêÏÑúÎäî Ìï≠ÏÉÅ ÎπÑÌôúÏÑ±Ìôî
        initialQuality: 0.7,
        onProgress: (progress: number) => {
          onProgress?.(70 + (progress * 25));
        }
      });
      
      // Îçî ÎÇòÏùÄ Í≤∞Í≥ºÎùºÎ©¥ ÏÇ¨Ïö©
      if (secondAttempt.size < compressedFile.size) {
        compressedFile = secondAttempt;
      }
    }
    
    onProgress?.(100);
    
    const compressionRatio = Math.round((1 - compressedFile.size / file.size) * 100);
    
    console.log('Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï ÏôÑÎ£å:', {
      original: `${(file.size / 1024 / 1024).toFixed(2)}MB`,
      compressed: `${(compressedFile.size / 1024 / 1024).toFixed(2)}MB`,
      ratio: `${compressionRatio}% Ï†àÏïΩ`,
      browser: browserInfo.browser,
      success: true
    });
    
    return {
      file: compressedFile,
      originalSize: file.size,
      compressedSize: compressedFile.size,
      compressionRatio
    };
    
  } catch (error) {
    console.error('Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï Ïã§Ìå®:', error);
    
    // Ïù∏Ïï±Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÏïïÏ∂ï Ïã§Ìå® Ïãú ÏµúÌõÑÏùò ÏàòÎã®
    if (browserInfo.isInApp) {
      try {
        console.log('Ìè¥Î∞± ÏïïÏ∂ï ÏãúÎèÑ...');
        onProgress?.(50);
        
        // Îß§Ïö∞ Îã®ÏàúÌïú ÏïïÏ∂ï ÏãúÎèÑ
        const fallbackFile = await imageCompression(file, {
          maxSizeMB: Math.min(5, file.size / (1024 * 1024) * 0.5), // ÏõêÎ≥∏Ïùò 50% ÎòêÎäî 5MB Ï§ë ÏûëÏùÄ Í≤É
          maxWidthOrHeight: 1200,
          useWebWorker: false,
          initialQuality: 0.9
        });
        
        onProgress?.(100);
        
        const compressionRatio = Math.round((1 - fallbackFile.size / file.size) * 100);
        
        console.log('Ìè¥Î∞± ÏïïÏ∂ï ÏÑ±Í≥µ:', {
          original: `${(file.size / 1024 / 1024).toFixed(2)}MB`,
          compressed: `${(fallbackFile.size / 1024 / 1024).toFixed(2)}MB`,
          ratio: `${compressionRatio}% Ï†àÏïΩ`
        });
        
        return {
          file: fallbackFile,
          originalSize: file.size,
          compressedSize: fallbackFile.size,
          compressionRatio
        };
        
      } catch (fallbackError) {
        console.error('Ìè¥Î∞± ÏïïÏ∂ïÎèÑ Ïã§Ìå®:', fallbackError);
      }
    }
    
    onProgress?.(100);
    
    // ÏµúÏ¢ÖÏ†ÅÏúºÎ°ú ÏïïÏ∂ïÏóê Ïã§Ìå®ÌïòÎ©¥ ÏõêÎ≥∏ÏùÑ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö© (Îã®, ÌÅ¨Í∏∞ Ï†úÌïú ÌôïÏù∏)
    if (file.size > 10 * 1024 * 1024) { // 10MB Ï¥àÍ≥ºÏãú ÏóêÎü¨
      throw new Error('ÌååÏùºÏù¥ ÎÑàÎ¨¥ ÌÅΩÎãàÎã§. 10MB Ïù¥ÌïòÏùò Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
    }
    
    console.log('ÏõêÎ≥∏ ÌååÏùº ÏÇ¨Ïö© (ÏïïÏ∂ï Ïã§Ìå®)');
    return {
      file,
      originalSize: file.size,
      compressedSize: file.size,
      compressionRatio: 0
    };
  }
};

export const validateImageFile = (file: File): { isValid: boolean; error?: string } => {
  const browserInfo = detectInAppBrowser();
  
  // Î∏åÎùºÏö∞Ï†ÄÎ≥Ñ ÏµúÎåÄ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
  const maxSize = browserInfo.needsSpecialHandling ? 
    15 * 1024 * 1024 : // ÌäπÎ≥Ñ Ï≤òÎ¶¨ ÌïÑÏöî: 15MB
    browserInfo.isInApp ? 
      20 * 1024 * 1024 : // ÏùºÎ∞ò Ïù∏Ïï±: 20MB  
      25 * 1024 * 1024;   // ÏùºÎ∞ò Î∏åÎùºÏö∞Ï†Ä: 25MB
  
  if (file.size > maxSize) {
    const maxSizeMB = Math.round(maxSize / 1024 / 1024);
    return { 
      isValid: false, 
      error: `Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÄ ${maxSizeMB}MB Ïù¥ÌïòÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.` 
    };
  }

  // HEIC/HEIF ÏïàÎÇ¥
  const heicTypes = ['image/heic', 'image/heif', 'image/heic-sequence'];
  if (heicTypes.includes(file.type)) {
    return {
      isValid: false,
      error: 'HEIC/HEIF Ïù¥ÎØ∏ÏßÄÎäî ÏïÑÏßÅ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§. iPhone ÏÑ§Ï†ïÏóêÏÑú JPEG/PNGÎ°ú Ï†ÄÏû•ÌïòÍ±∞ÎÇò Î≥ÄÌôò ÌõÑ Îã§Ïãú ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.'
    };
  }

  // MIME ÌÉÄÏûÖ Ï≤¥ÌÅ¨
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
  if (!allowedTypes.includes(file.type)) {
    return { 
      isValid: false, 
      error: 'JPG, PNG, WEBP ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.' 
    };
  }

  // ÌååÏùº Ïù¥Î¶Ñ Ï≤¥ÌÅ¨ (ÌäπÏàòÎ¨∏Ïûê Îì±)
  if (!/^[a-zA-Z0-9._-]+$/i.test(file.name.replace(/\s+/g, '_'))) {
    console.warn('ÌååÏùºÎ™ÖÏóê ÌäπÏàòÎ¨∏Ïûê Ìè¨Ìï®, ÏûêÎèô Î≥ÄÌôòÎê®');
  }

  return { isValid: true };
};

export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};
